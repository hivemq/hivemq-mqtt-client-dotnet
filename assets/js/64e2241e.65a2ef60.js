"use strict";(globalThis.webpackChunkdocumentation=globalThis.webpackChunkdocumentation||[]).push([[1204],{4192:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"events/Examples","title":"Usage Examples","description":"The following serves as a few examples on how to utilize the built in event system.","source":"@site/docs/events/Examples.md","sourceDirName":"events","slug":"/events/Examples","permalink":"/hivemq-mqtt-client-dotnet/docs/events/Examples","draft":false,"unlisted":false,"editUrl":"https://github.com/hivemq/hivemq-mqtt-client-dotnet/tree/main/Documentation/docs/events/Examples.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Event Reference","permalink":"/hivemq-mqtt-client-dotnet/docs/events/Reference"},"next":{"title":"How To Guides","permalink":"/hivemq-mqtt-client-dotnet/docs/category/how-to-guides"}}');var s=t(4848),r=t(8453);const a={sidebar_position:2},c="Usage Examples",l={},o=[{value:"Pattern",id:"pattern",level:2},{value:"Lambdas",id:"lambdas",level:3},{value:"Event Arguments",id:"event-arguments",level:3},{value:"Display Options Prior to Connecting",id:"display-options-prior-to-connecting",level:2},{value:"Taking Action After a Subscribe",id:"taking-action-after-a-subscribe",level:2},{value:"Monitoring outgoing Publish Packets",id:"monitoring-outgoing-publish-packets",level:2},{value:"Monitoring Subscribe Response Packets (SUBACK)",id:"monitoring-subscribe-response-packets-suback",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"usage-examples",children:"Usage Examples"})}),"\n",(0,s.jsx)(n.p,{children:"The following serves as a few examples on how to utilize the built in event system."}),"\n",(0,s.jsx)(n.h2,{id:"pattern",children:"Pattern"}),"\n",(0,s.jsxs)(n.p,{children:["All events are available on the client instance: ",(0,s.jsx)(n.code,{children:"client.<event_name>"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Handlers can be assigned to the event by simply adding your handler to the list.  Handlers can be either a pre-defined function or a lambda (illustrated in the next section)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"client.AfterDisconnect += MyAfterDisconnectHAndler\n"})}),"\n",(0,s.jsxs)(n.p,{children:["...where ",(0,s.jsx)(n.code,{children:"MyAfterDisconnectHandler"})," is an already-defined function in my application with the following signature:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"static void MyAfterDisconnectHandler(object? sender, AfterDisconnectEventArgs eventArgs)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"lambdas",children:"Lambdas"}),"\n",(0,s.jsx)(n.p,{children:"An alternative to using a pre-defined function are lambdas:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"client.AfterUnsubscribe += (sender, args) =>\n{\n    // code\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"event-arguments",children:"Event Arguments"}),"\n",(0,s.jsxs)(n.p,{children:["The definitions for all event arguments ",(0,s.jsx)(n.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/tree/main/Source/HiveMQtt/Client/Events",children:"can be found here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"display-options-prior-to-connecting",children:"Display Options Prior to Connecting"}),"\n",(0,s.jsxs)(n.p,{children:["This example simply prints out the ",(0,s.jsx)(n.code,{children:"HiveMQClientOptions"})," prior to the connect command being sent to the broker."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void BeforeConnectHandler(object? sender, BeforeConnectEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n        Console.WriteLine("Connecting to Broker with the Options: {}", eventArgs.Options)\n\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\n\nclient.BeforeConnect += BeforeConnectHandler;\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"taking-action-after-a-subscribe",children:"Taking Action After a Subscribe"}),"\n",(0,s.jsx)(n.p,{children:"Suppose you wanted to take some global action after every subscribe call made by the client.  This example\nillustrates the steps required."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void AfterSubscribeHandler(object? sender, AfterSubscribeEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n\n        // The result of the subscribe call\n        // eventArgs.SubcribeResult\n\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\n\nclient.BeforeConnect += BeforeConnectHandler;\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\nvar subscribeResult = await client.SubscribeAsync("district/9/level", MQTT5.Types.QualityOfService.ExactlyOnceDelivery).ConfigureAwait(false);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-outgoing-publish-packets",children:"Monitoring outgoing Publish Packets"}),"\n",(0,s.jsx)(n.p,{children:"The following can be used to monitor when publish packets are transmitted from the client.  A potential debug vector in application development."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void OnPublishSentHandler(object? sender, OnPublishSentEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n\n        // The transmitted MQTT Publish packet\n        // eventArgs.PublishPacket\n\n        // and the MQTT5PublishMessage\n        // eventArgs.PublishPacket.Message\n\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n\nclient.OnPublishSent += OnPublishSentHandler;\n\nvar result = await client.PublishAsync("district/7/count", "82", MQTT5.Types.QualityOfService.AtLeastOnceDelivery).ConfigureAwait(false);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-subscribe-response-packets-suback",children:"Monitoring Subscribe Response Packets (SUBACK)"}),"\n",(0,s.jsx)(n.p,{children:"The following can be used to monitor SubAck responses from the broker"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void OnSubAckReceivedHandler(object? sender, OnSubAckReceivedEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n\n        // The received SubAck packet\n        // eventArgs.SubAckPacket\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\nvar subResult = await client.SubscribeAsync("district/9/level", MQTT5.Types.QualityOfService.ExactlyOnceDelivery).ConfigureAwait(false);\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
"use strict";(globalThis.webpackChunkdocumentation=globalThis.webpackChunkdocumentation||[]).push([[3141],{3166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"reference/automatic_reconnect","title":"Automatic Reconnect","description":"The HiveMQtt MQTT library provides an automatic reconnect functionality that allows the client to automatically reconnect to the MQTT broker in case of a disconnection. This feature is disabled by default.","source":"@site/docs/reference/automatic_reconnect.md","sourceDirName":"reference","slug":"/reference/automatic_reconnect","permalink":"/hivemq-mqtt-client-dotnet/docs/reference/automatic_reconnect","draft":false,"unlisted":false,"editUrl":"https://github.com/hivemq/hivemq-mqtt-client-dotnet/tree/main/Documentation/docs/reference/automatic_reconnect.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Reference","permalink":"/hivemq-mqtt-client-dotnet/docs/category/reference"},"next":{"title":"HiveMQClientOptions","permalink":"/hivemq-mqtt-client-dotnet/docs/reference/client_options"}}');var o=n(4848),i=n(8453);const a={},r="Automatic Reconnect",s={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"automatic-reconnect",children:"Automatic Reconnect"})}),"\n",(0,o.jsx)(t.p,{children:"The HiveMQtt MQTT library provides an automatic reconnect functionality that allows the client to automatically reconnect to the MQTT broker in case of a disconnection. This feature is disabled by default."}),"\n",(0,o.jsx)(t.h1,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:"var options = new HiveMQClientOptionsBuilder()\n                    .WithAutomaticReconnect(true)\n                    .Build();\n\n// Create a new client with the configured options\nvar client = new HiveMQttClient(options);\n"})}),"\n",(0,o.jsx)(t.h1,{id:"backoff-strategy",children:"Backoff Strategy"}),"\n",(0,o.jsx)(t.p,{children:"The automatic reconnect functionality uses a backoff strategy to attempt to reconnect to the MQTT broker periodically until success. The backoff strategy starts with a delay of 5 seconds and doubles the delay with each failed attempt, up to a maximum of 1 minute."}),"\n",(0,o.jsx)(t.h1,{id:"maximum-attempts",children:"Maximum Attempts"}),"\n",(0,o.jsx)(t.p,{children:"The backoff strategy will attempt to reconnect a maximum of once per minute.  The client will attempt to reconnect indefinitely until successful."}),"\n",(0,o.jsx)(t.h1,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(t.p,{children:["The automatic reconnect functionality a convenient way to handle disconnections from the MQTT broker. Users can also use the ",(0,o.jsx)(t.code,{children:"OnConnect"})," event handler to add custom logic when the client successfully reconnects to the MQTT broker."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var c=n(6540);const o={},i=c.createContext(o);function a(e){const t=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),c.createElement(i.Provider,{value:t},e.children)}}}]);